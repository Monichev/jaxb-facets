package at.ac.tuwien.infosys.jaxb;

import java.lang.annotation.Annotation;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.xml.bind.annotation.AppInfo;
import javax.xml.bind.annotation.Documentation;
import javax.xml.bind.annotation.Facets;
import javax.xml.bind.annotation.MaxOccurs;
import javax.xml.bind.annotation.MinOccurs;
import javax.xml.namespace.QName;

import com.sun.xml.internal.bind.v2.model.core.AttributePropertyInfo;
import com.sun.xml.internal.bind.v2.model.core.ClassInfo;
import com.sun.xml.internal.bind.v2.model.core.PropertyInfo;
import com.sun.xml.internal.bind.v2.model.core.TypeRef;
import com.sun.xml.internal.bind.v2.model.core.ValuePropertyInfo;
import com.sun.xml.internal.bind.v2.schemagen.xmlschema.LocalAttribute;
import com.sun.xml.internal.bind.v2.schemagen.xmlschema.LocalElement;
import com.sun.xml.internal.bind.v2.schemagen.xmlschema.SimpleRestriction;
import com.sun.xml.internal.txw2.TypedXmlWriter;

/**
 * @author Waldemar Hummer (hummer@infosys.tuwien.ac.at)
 * @version 0.2 added support for Facet restrictions for XML attributes
 * @version 0.3 fixed classloading/proxying issue for JBoss, related to:
 *          http://lists.jboss.org/pipermail/forge-issues/2011-October/000351.html
 */
@SuppressWarnings("all")
public class XmlSchemaEnhancerJava7 {

    public static final String NS_XSD = "http://www.w3.org/2001/XMLSchema";
    public static final String NS_XML = "http://www.w3.org/XML/1998/namespace";
    public static final Logger logger = Logger
            .getLogger(XmlSchemaEnhancerJava7.class.getName());

    public static <T, C> void addFacets(TypeRef<T, C> t, LocalElement e) {

        if (!hasFacets(t))
            return;

        Map<String, List<String>> facets = new HashMap<String, List<String>>();

        Facets facetsAnno = getFacetsAnnotation(t);

        try {
            facets = XmlSchemaEnhancer.getDefinedFacets(facetsAnno);
        } catch (Exception ex) {
            logger.log(Level.WARNING,
                    "Unable to add XSD Facets in Schema generated by JAXB.", ex);
            return;
        }

        TypedXmlWriter restriction = null;
        for (String facetName : facets.keySet()) {
            restriction = getRestriction(t, e, restriction);
            for (String facetValue : facets.get(facetName)) {
                logger.info("Adding XSD-Facets schema restriction: "
                        + new QName(NS_XSD, facetName));
                restriction._element(new QName(NS_XSD, facetName),
                        TypedXmlWriter.class)._attribute("value", facetValue);
            }
        }

    }

    public static <T, C> void addFacets(AttributePropertyInfo<T, C> info,
            LocalAttribute attr) {

        if (!hasFacets(info))
            return;

        Map<String, List<String>> facets = new HashMap<String, List<String>>();

        Facets facetsAnno = getFacetsAnnotation(info);

        try {
            facets = XmlSchemaEnhancer.getDefinedFacets(facetsAnno);
        } catch (Exception ex) {
            logger.log(Level.WARNING,
                    "Unable to add XSD Facets in Schema generated by JAXB.", ex);
            return;
        }

        TypedXmlWriter restriction = null;
        for (String facetName : facets.keySet()) {
            restriction = getRestriction(info, attr, restriction);
            for (String facetValue : facets.get(facetName)) {
                restriction._element(new QName(NS_XSD, facetName),
                        TypedXmlWriter.class)._attribute("value", facetValue);
            }
        }

    }

    public static <T, C> void addFacets(ValuePropertyInfo<T, C> info,
            SimpleRestriction sr) {

        // TODO: refactor and avoid code duplication

        if (!hasFacets(info))
            return;

        Map<String, List<String>> facets = new HashMap<String, List<String>>();

        Facets facetsAnno = getFacetsAnnotation(info);

        try {
            facets = XmlSchemaEnhancer.getDefinedFacets(facetsAnno);
        } catch (Exception ex) {
            logger.log(Level.WARNING,
                    "Unable to add XSD Facets in Schema generated by JAXB.", ex);
            return;
        }

        TypedXmlWriter restriction = null;
        for (String facetName : facets.keySet()) {
            for (String facetValue : facets.get(facetName)) {
                sr._element(new QName(NS_XSD, facetName), TypedXmlWriter.class)
                        ._attribute("value", facetValue);
            }
        }
    }

    private static <T, C> Facets getFacetsAnnotation(TypeRef<T, C> t) {
        if (!t.getTarget().isSimpleType())
            return null;
        return getFacetsAnnotation(t.getSource());
    }

    private static <T, C> Facets getFacetsAnnotation(
            AttributePropertyInfo<T, C> t) {
        if (!t.getTarget().isSimpleType())
            return null;
        return getFacetsAnnotation(t.getSource());
    }

    private static <T, C> Facets getFacetsAnnotation(
            ValuePropertyInfo<T, C> t) {
        if (!t.getTarget().isSimpleType())
            return null;
        return getFacetsAnnotation(t.getSource());
    }

    private static <T, C> Facets getFacetsAnnotation(PropertyInfo<T,C> info) {
        try {
            Object value = getAnnotationOfProperty(info, Facets.class);
            if (value instanceof Facets)
                return (Facets) value;
        } catch (Exception e2) {
            logger.log(Level.WARNING,
                    "Unable to get Facets annotation from type: " + info, e2);
        }
        return null;
    }

    public static <T,C> boolean hasFacets(ValuePropertyInfo<T, C> info) {
        Facets facets = getFacetsAnnotation(info);
        return hasFacets(facets);
    }
    public static <T,C> boolean hasFacets(TypeRef<T, C> t) {
        Facets facets = getFacetsAnnotation(t);
        return hasFacets(facets);
    }

    public static <T, C> boolean hasFacets(AttributePropertyInfo<T, C> ap) {
        Facets facets = getFacetsAnnotation(ap);
        return hasFacets(facets);
    }

    public static <T, C> boolean hasFacets(Facets facets) {

        if (facets == null)
            return false;

        try {
            Map<String, List<String>> definedFacets = XmlSchemaEnhancer
                    .getDefinedFacets(facets);
            return definedFacets.size() > 0;
        } catch (Exception e) {
            logger.log(Level.WARNING,
                    "Unable to get XSD Facet definitions.", e);
            return false;
        }
    }

    public static <T> void addXsdAnnotations(T type, TypedXmlWriter w) {
        if (!hasXsdAnnotations(type))
            return;

        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(type);
        addXsdAnnotations(anno, w);
    }

    public static <T, C> void addXsdAnnotations(ClassInfo<T, C> ci,
            TypedXmlWriter w) {
        if (!hasXsdAnnotations(ci))
            return;

        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(ci);
        addXsdAnnotations(anno, w);
    }

    public static <T, C> void addXsdAnnotations(TypeRef<T, C> t, LocalElement e) {
        if (!hasXsdAnnotations(t))
            return;

        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(t);
        addXsdAnnotations(anno, e);
    }

    public static <T, C> void addXsdAnnotations(
            AttributePropertyInfo<T, C> _info, LocalAttribute _attr) {
        if (!hasXsdAnnotations(_info))
            return;

        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(_info);
        addXsdAnnotations(anno, _attr);
    }

    public static <T, C> void addXsdAnnotations(
            javax.xml.bind.annotation.Annotation anno, TypedXmlWriter obj) {

        TypedXmlWriter annoEl = getXsdAnnotation(obj, anno.id(),
                anno.attributes());
        for (AppInfo info : anno.appinfo()) {
            TypedXmlWriter w = annoEl._element(new QName(NS_XSD, "appinfo"),
                    TypedXmlWriter.class);
            if (info.source() != null && !info.source().equals("")) {
                w._attribute(new QName("source"), info.source());
            }
            w._pcdata(info.value());
        }
        for (Documentation doc : anno.documentation()) {
            TypedXmlWriter w = annoEl._element(new QName(NS_XSD,
                    "documentation"), TypedXmlWriter.class);
            if (doc.source() != null && !doc.source().equals("")) {
                w._attribute(new QName("source"), doc.source());
            }
            if (doc.lang() != null && !doc.lang().equals("")) {
                w._attribute(new QName(NS_XML, "lang"), doc.lang());
            }
            w._pcdata(doc.value());
        }
    }

    private static <T, C> TypedXmlWriter getXsdAnnotation(TypedXmlWriter obj,
            String annoID, String[] otherAttributes) {
        TypedXmlWriter anno = obj._element(new QName(NS_XSD, "annotation"),
                TypedXmlWriter.class);
        if (annoID != null && !annoID.trim().isEmpty()) {
            anno._attribute(new QName("id"), annoID);
        }
        if (otherAttributes != null && otherAttributes.length > 0) {
            // TODO implement!
            logger.warning("Support for arbitrary attributes on xsd:annotation element not implemented yet.");
        }
        return anno;
    }

    private static <T, C> javax.xml.bind.annotation.Annotation getXsdAnnotationAnnotation(
            ClassInfo<T, C> ci) {
        return getXsdAnnotationAnnotation(ci.getType());
    }

    private static <T, C> javax.xml.bind.annotation.Annotation getXsdAnnotationAnnotation(
            T type) {
        if (type instanceof Class<?>) {
            Class<?> clazz = (Class<?>) type;
            javax.xml.bind.annotation.Annotation anno = clazz
                    .getAnnotation(javax.xml.bind.annotation.Annotation.class);
            AppInfo appinfo = clazz.getAnnotation(AppInfo.class);
            Documentation doc = clazz.getAnnotation(Documentation.class);
            return XmlSchemaEnhancer.getXsdAnnotationAnnotation(anno, doc,
                    appinfo);
        } else if (type instanceof Package) {
            Package pkg = (Package) type;
            javax.xml.bind.annotation.Annotation anno = pkg
                    .getAnnotation(javax.xml.bind.annotation.Annotation.class);
            AppInfo appinfo = pkg.getAnnotation(AppInfo.class);
            Documentation doc = pkg.getAnnotation(Documentation.class);
            return XmlSchemaEnhancer.getXsdAnnotationAnnotation(anno, doc,
                    appinfo);
        }
        return null;
    }

    private static <T, C> javax.xml.bind.annotation.Annotation getXsdAnnotationAnnotation(
            TypeRef<T, C> t) {
        return getXsdAnnotationAnnotation(t.getSource());
    }

    private static <T, C> javax.xml.bind.annotation.Annotation getXsdAnnotationAnnotation(
            AttributePropertyInfo<T, C> t) {
        return getXsdAnnotationAnnotation(t.getSource());
    }

    private static <T, C> javax.xml.bind.annotation.Annotation getXsdAnnotationAnnotation(
            PropertyInfo<T, C> t) {
        javax.xml.bind.annotation.Annotation anno = null;
        AppInfo appinfo = null;
        Documentation doc = null;

        try {
            Object value = getAnnotationOfProperty(t,
                    javax.xml.bind.annotation.Annotation.class);
            if (value instanceof javax.xml.bind.annotation.Annotation) {
                anno = (javax.xml.bind.annotation.Annotation) value;
            }
        } catch (Exception e2) {
            logger.log(Level.WARNING,
                    "Unable to get XSD Annotation annotation from type " + t,
                    e2);
        }

        try {
            Object value = getAnnotationOfProperty(t, AppInfo.class);
            if (value instanceof AppInfo) {
                appinfo = (AppInfo) value;
            }
        } catch (Exception e2) {
            logger.log(Level.WARNING,
                    "Unable to get XSD AppInfo annotation from type " + t, e2);
        }

        try {
            Object value = getAnnotationOfProperty(t, Documentation.class);
            if (value instanceof Documentation) {
                doc = (Documentation) value;
            }
        } catch (Exception e2) {
            logger.log(
                    Level.WARNING,
                    "Unable to get XSD Documentation annotation from type " + t,
                    e2);
        }

        return XmlSchemaEnhancer.getXsdAnnotationAnnotation(anno, doc, appinfo);
    }

    public static <T> boolean hasXsdAnnotations(T type) {
        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(type);
        return anno != null;
    }

    public static <T, C> boolean hasXsdAnnotations(ClassInfo<T, C> ci) {
        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(ci);
        return anno != null;
    }

    public static <T, C> boolean hasXsdAnnotations(TypeRef<T, C> t) {
        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(t);
        return anno != null;
    }

    public static <T, C> boolean hasXsdAnnotations(
            AttributePropertyInfo<T, C> ap) {
        javax.xml.bind.annotation.Annotation anno = getXsdAnnotationAnnotation(ap);
        return anno != null;
    }

    private static <T, C> Class<?> getPropertyParentType(PropertyInfo<T, C> info)
            throws Exception {
        if (info.parent() == null)
            return null;
        if (!(info.parent().getType() instanceof Class<?>))
            return null;
        return (Class<?>) info.parent().getType();
    }

    private static <T, C> Object getAnnotationOfProperty(
            PropertyInfo<T, C> info, Class<? extends Annotation> annoClass)
            throws Exception {
        if (annoClass == Facets.class && info.hasAnnotation(Facets.class))
            return info.readAnnotation(Facets.class);
        Class<?> typeClass = getPropertyParentType(info);
        if (typeClass == null)
            return null;
        return XmlSchemaEnhancer.getAnnotationOfProperty(typeClass,
                info.getName(), annoClass);
    }

    public static <T, C> boolean writeCustomOccurs(TypeRef<T, C> t,
            LocalElement e, boolean isOptional, boolean repeated) {

        MaxOccurs max = null;
        MinOccurs min = null;
        try {
            max = (MaxOccurs) getAnnotationOfProperty(t.getSource(),
                    MaxOccurs.class);
        } catch (Exception e2) {
            logger.log(Level.WARNING,
                    "Unable to get @MaxOccurs annotation from type " + t, e2);
        }
        try {
            min = (MinOccurs) getAnnotationOfProperty(t.getSource(),
                    MinOccurs.class);
        } catch (Exception e2) {
            logger.log(Level.WARNING,
                    "Unable to get @MinOccurs annotation from type " + t, e2);
        }

        if (min == null && max == null)
            return false;

        if (min != null) {
            int value = (int) min.value();
            e.minOccurs(value);
        } else if (isOptional) {
            e.minOccurs(0);
        }

        if (max != null) {
            int value = (int) max.value();
            e.maxOccurs(value);
        } else if (repeated) {
            e.maxOccurs("unbounded");
        }

        return true;
    }

    private static <T, C> TypedXmlWriter getRestriction(
            AttributePropertyInfo<T, C> info, LocalAttribute attr,
            TypedXmlWriter w) {
        if (w == null) {
            TypedXmlWriter st = attr._element(new QName(NS_XSD, "simpleType"),
                    TypedXmlWriter.class);
            TypedXmlWriter r = st._element(new QName(NS_XSD, "restriction"),
                    TypedXmlWriter.class);
            r._attribute("base", info.getTarget().getTypeName());
            return r;
        }
        return w;
    }

    private static <T, C> TypedXmlWriter getRestriction(TypeRef<T, C> t,
            LocalElement e, TypedXmlWriter w) {
        if (w == null) {
            TypedXmlWriter st = e._element(new QName(NS_XSD, "simpleType"),
                    TypedXmlWriter.class);
            TypedXmlWriter r = st._element(new QName(NS_XSD, "restriction"),
                    TypedXmlWriter.class);
            Object src = t.getSource();
            QName schemaType = t.getSource() == null ? null : t.getSource()
                    .getSchemaType();
            if (schemaType == null)
                schemaType = t.getTarget().getTypeName();
            r._attribute("base", schemaType);
            return r;
        }
        return w;
    }

}
